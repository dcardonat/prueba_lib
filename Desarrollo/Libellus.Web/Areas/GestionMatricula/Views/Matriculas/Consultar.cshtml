@model Libellus.Web.Areas.GestionMatricula.Models.Matriculas.ConsultarMatriculaViewModel

@{
    ViewBag.Title = "Registro de matrícula";
    Html.EnableClientValidation(false);
    object valorAnio = ViewBag.AnioLectivo;
}

<div class="content-header">
    <h2 class="content-header-title">@ViewBag.Title</h2>
</div>

<br />

@using (Html.BeginForm("Consultar", "Matriculas", FormMethod.Get, new { id = "formulario-consulta-matriculas" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="form-group col-md-4">
            @Html.Partial("_AniosLectivos", valorAnio)
            @Html.ValidationMessageFor(model => model.IdAnioLectivo, "", new { @class = "text-danger" })
            @Html.Hidden("AnioSeleccionado")
        </div>

        <div class="col-md-4 form-group">
            @Html.LabelFor(model => model.IdEstado)
            @Html.DropDownListFor(model => model.IdEstado, Model.Estados, new { @class = "form-control", tabindex = "2" })
        </div>

        <div class="col-md-4 form-group">
            @Html.LabelFor(model => model.IdTipoDocumento)
            @Html.DropDownListFor(model => model.IdTipoDocumento, Model.TiposDocumento, new { @class = "form-control", tabindex = "3" })
        </div>
    </div>
    <div class="row">
        <div class="col-md-4 form-group">
            @Html.LabelFor(model => model.DocumentoIdentidad)
            @Html.TextBoxFor(model => model.DocumentoIdentidad, new { @class = "form-control", tabindex = "4", maxlength = "14" })
        </div>
    </div>

    <br />

    <div class="form-group" style="text-align: center !important;">
        <input type="submit" class="btn btn-primary centered" value="Consultar" tabindex="5" />
    </div>

    @Html.Hidden("consultar", true);
}

<br /><br />

@if (Model != null && Model.Matriculas.Count() > 0)
{
    <div class="row">
        <div class="col-md-12">
            <div class="table-responsive">
                <table class="@EstilosHelper.TablaLibellus">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().Anio)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().TipoDocumento)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().DocumentoIdentidad)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().Nombres)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().NivelEducativo)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().Grado)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().SalidaOcupacional)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Matriculas.First().Estado)
                        </th>
                        <th>Acción</th>
                    </tr>

                    @foreach (var item in Model.Matriculas)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.Anio)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TipoDocumento)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DocumentoIdentidad)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Nombres)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NivelEducativo)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Grado)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.SalidaOcupacional)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Estado)
                            </td>
                            <td>
                                @if ((item.Consecutivo == (int)ConsecutivoMaestros.EstadoMatriculaEstudiantePreInscrito || item.Consecutivo == (int)ConsecutivoMaestros.EstadoMatriculaEstudiantePendienteDocumentación) && item.AnioCerrado == false)
                                {
                                    @Html.ActionLink("Registrar matrícula", "Registrar", new { id = item.Id })
                                }
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>

    <div class="centered">
        @Html.PagedListPager(Model.Matriculas, pagina => Url.Action("Consultar", new { pagina = pagina, IdAnioLectivo = valorAnio, IdEstado = ViewBag.IdEstado, IdTipoDocumento = ViewBag.IdTipoDocumento, DocumentoIdentidad = ViewBag.DocumentoIdentidad, consultar = true }))
    </div>

    <div class="form-group" style="text-align: center !important;">
        <button type="button" id="exportarExcel" class="btn btn-success centered" tabindex="8">Exportar a Excel</button>
    </div>

    @Html.Hidden("tokenExportarExcel")
}

@section Scripts {
    @Scripts.Render("~/bundles/general/js")
    @Scripts.Render("~/bundles/jqueryval")


    <script type="text/javascript">

        $("#exportarExcel").bind("click", function () {

            $('[name="tokenExportarExcel"]').val(new Date().getTime());

            IniciarDescargaArchivo("exportarExcel");
            window.location.href = "@Url.Action("ExportarInformacionExcel")" + "?token=" + $('[name="tokenExportarExcel"]').val();
        });

        function MostrarMensajeSinInformacion() {

            if ($('table').length < 1 && '@ViewBag.Consultar') {
                var mensaje = @Html.Raw(Json.Encode(new Mensaje(CodigoMensaje.Mensaje1005)));
                VisualizarMensajeNegocio(mensaje.Tipo, mensaje.Texto, 7000);
            }
        }

        function validarFormulario() {
            var validador = $('#formulario-consulta-matriculas').validate({
                rules: {
                    IdAnioLectivo: {
                        required: true
                    }
                },
                messages: {
                    IdAnioLectivo: '@Mensaje.Mensaje1001'
                },
                errorClass: "input-validation-error field-validation-error",
                errorElement: "div"
            });
        }

        $(document).ready(function () {
            MostrarMensajeSinInformacion();
            validarFormulario();
        });

    </script>
}
